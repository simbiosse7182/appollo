/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "../../config/context"
import { FieldAuthorizeResolver } from "@nexus/schema/dist/plugins/fieldAuthorizePlugin"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  Chat: { // root type
    id?: number | null; // Int
    lastMessage?: NexusGenRootTypes['Message'] | null; // Message
    lastMessageId?: number | null; // Int
    messages?: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
    unreadMessagesCount?: number | null; // Int
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Message: { // root type
    author?: NexusGenRootTypes['User'] | null; // User
    authorId?: number | null; // Int
    chat?: NexusGenRootTypes['Chat'] | null; // Chat
    chatId?: number | null; // Int
    id?: number | null; // Int
    readed?: boolean | null; // Boolean
    text?: string | null; // String
  }
  Mutation: {};
  Query: {};
  User: { // root type
    chats?: Array<NexusGenRootTypes['Chat'] | null> | null; // [Chat]
    id?: number | null; // Int
    login?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Chat: { // field return type
    id: number | null; // Int
    lastMessage: NexusGenRootTypes['Message'] | null; // Message
    lastMessageId: number | null; // Int
    messages: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
    unreadMessagesCount: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Message: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number | null; // Int
    chat: NexusGenRootTypes['Chat'] | null; // Chat
    chatId: number | null; // Int
    id: number | null; // Int
    readed: boolean | null; // Boolean
    text: string | null; // String
  }
  Mutation: { // field return type
    readMessage: boolean | null; // Boolean
    registration: string | null; // String
    sendMessage: NexusGenRootTypes['Message'] | null; // Message
  }
  Query: { // field return type
    authorization: string | null; // String
    chats: Array<NexusGenRootTypes['Chat'] | null> | null; // [Chat]
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    chats: Array<NexusGenRootTypes['Chat'] | null> | null; // [Chat]
    id: number | null; // Int
    login: string | null; // String
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Chat: { // field return type name
    id: 'Int'
    lastMessage: 'Message'
    lastMessageId: 'Int'
    messages: 'Message'
    unreadMessagesCount: 'Int'
    updatedAt: 'DateTime'
    users: 'User'
  }
  Message: { // field return type name
    author: 'User'
    authorId: 'Int'
    chat: 'Chat'
    chatId: 'Int'
    id: 'Int'
    readed: 'Boolean'
    text: 'String'
  }
  Mutation: { // field return type name
    readMessage: 'Boolean'
    registration: 'String'
    sendMessage: 'Message'
  }
  Query: { // field return type name
    authorization: 'String'
    chats: 'Chat'
    me: 'User'
  }
  User: { // field return type name
    chats: 'Chat'
    id: 'Int'
    login: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    readMessage: { // args
      messageId: number; // Int!
    }
    registration: { // args
      login: string; // String!
      name: string; // String!
      password: string; // String!
    }
    sendMessage: { // args
      text: string; // String!
      to: string; // String!
    }
  }
  Query: {
    authorization: { // args
      login: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Chat" | "Message" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginSchemaConfig {
  }
}