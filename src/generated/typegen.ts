/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "../config/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ChatWhereUniqueInput: { // input type
    id?: number | null; // Int
    key?: string | null; // String
  }
  MessageWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserWhereUniqueInput: { // input type
    id?: number | null; // Int
    login?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Chat: { // root type
    id: number; // Int!
  }
  Message: { // root type
    authorId: number; // Int!
    chatId: number; // Int!
    id: number; // Int!
    text: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    id: number; // Int!
    login: string; // String!
    name: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ChatWhereUniqueInput: NexusGenInputs['ChatWhereUniqueInput'];
  MessageWhereUniqueInput: NexusGenInputs['MessageWhereUniqueInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Chat: { // field return type
    id: number; // Int!
    messages: NexusGenRootTypes['Message'][]; // [Message!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Message: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: number; // Int!
    chat: NexusGenRootTypes['Chat']; // Chat!
    chatId: number; // Int!
    id: number; // Int!
    text: string; // String!
  }
  Mutation: { // field return type
    registration: string | null; // String
    sendMessage: NexusGenRootTypes['Message'] | null; // Message
  }
  Query: { // field return type
    authorization: string | null; // String
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    chats: NexusGenRootTypes['Chat'][]; // [Chat!]!
    id: number; // Int!
    login: string; // String!
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Chat: { // field return type name
    id: 'Int'
    messages: 'Message'
    users: 'User'
  }
  Message: { // field return type name
    author: 'User'
    authorId: 'Int'
    chat: 'Chat'
    chatId: 'Int'
    id: 'Int'
    text: 'String'
  }
  Mutation: { // field return type name
    registration: 'String'
    sendMessage: 'Message'
  }
  Query: { // field return type name
    authorization: 'String'
    me: 'User'
  }
  User: { // field return type name
    chats: 'Chat'
    id: 'Int'
    login: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Chat: {
    messages: { // args
      after?: NexusGenInputs['MessageWhereUniqueInput'] | null; // MessageWhereUniqueInput
      before?: NexusGenInputs['MessageWhereUniqueInput'] | null; // MessageWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    registration: { // args
      login: string; // String!
      name: string; // String!
      password: string; // String!
    }
    sendMessage: { // args
      text: string; // String!
      to: string; // String!
    }
  }
  Query: {
    authorization: { // args
      login: string; // String!
      password: string; // String!
    }
  }
  User: {
    chats: { // args
      after?: NexusGenInputs['ChatWhereUniqueInput'] | null; // ChatWhereUniqueInput
      before?: NexusGenInputs['ChatWhereUniqueInput'] | null; // ChatWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Chat" | "Message" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "ChatWhereUniqueInput" | "MessageWhereUniqueInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}